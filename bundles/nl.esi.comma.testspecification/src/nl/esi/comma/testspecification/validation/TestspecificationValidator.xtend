/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * generated by Xtext 2.36.0
 */
package nl.esi.comma.testspecification.validation

import nl.esi.comma.actions.actions.ActionsPackage
import nl.esi.comma.actions.actions.AssignmentAction
import nl.esi.comma.actions.actions.RecordFieldAssignmentAction
import nl.esi.comma.testspecification.testspecification.RefStep
import nl.esi.comma.types.types.Import
import nl.esi.comma.types.types.TypesPackage
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.validation.Check

import static extension nl.esi.comma.types.utilities.EcoreUtil3.serialize

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TestspecificationValidator extends AbstractTestspecificationValidator {

    @Check
    override checkImportForValidity(Import imp) {
        if (!EcoreUtil2.isValidUri(imp, URI.createURI(imp.getImportURI()))) {
            error("Invalid resource", imp, TypesPackage.Literals.IMPORT__IMPORT_URI);
        } else {
            /*val Resource r = EcoreUtil2.getResource(imp.eResource, imp.importURI)
             * if(! (r.allContents.head instanceof InterfaceDefinition ||
             *     r.allContents.head instanceof FeatureDefinition
             * ))
             *     error("The imported resource is not an interface definition or a feature definition.", imp, TypesPackage.eINSTANCE.import_ImportURI)
             }*/
        }
    }

    @Check
    def protected void checkDataOverwrite(RefStep refStep) {
        val assignments = newHashSet
        for (action : refStep.input.actions.reverseView) {
            switch action {
                AssignmentAction: {
                    if (!assignments.add(action.assignment.serialize)) {
                        warning('Value is ignored as it is overwritten later', action,
                            ActionsPackage.Literals.ASSIGNMENT_ACTION__ASSIGNMENT)
                    }
                }
                RecordFieldAssignmentAction: {
                    if (!assignments.add(action.fieldAccess.serialize)) {
                        warning('Value is ignored as it is overwritten later', action,
                            ActionsPackage.Literals.RECORD_FIELD_ASSIGNMENT_ACTION__FIELD_ACCESS)
                    }
                }
            }
        }
    }
}
