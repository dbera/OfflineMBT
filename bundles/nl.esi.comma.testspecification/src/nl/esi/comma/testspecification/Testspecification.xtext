/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
grammar nl.esi.comma.testspecification.Testspecification with nl.esi.comma.assertthat.AssertThat

generate testspecification "http://www.esi.nl/comma/testspecification/Testspecification"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr
import "http://www.asml.nl/matala/product/Product" as prod
import "http://www.esi.nl/comma/assertthat/AssertThat" as assertthat

TSMain:
	imports += Import*
	namespace += NameSpace*
	model = ModelType
;

@Override
NamedElement returns types::NamedElement:
	name=QualifiedName | Variable
;

ModelType:
	APIDefinition | TestDefinition
;

APIDefinition:
	('data-instances' vars+=Variable+)
	('data-init' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
;

TestDefinition:
	{TestDefinition}
	('Test-Purpose' purpose = STRING)?
	('Background' background = STRING)?
	('Stakeholders' stakeholder += StakeHolder+)?
	
	testSeq += TestSequence* 
	stepSeq += StepSequence*
	'generate-file' filePath = STRING
	('global-parameters' gparams+=Variable+)?
	('step-parameters' stepparams+=Variable+)?
	('sut-parameters' sutparams+=Variable+)?
	('global-param-init' gparamsInitActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
	('sut-param-init' sutInitActions+=(AssignmentAction | RecordFieldAssignmentAction)+ )?
	('sut-var' ':' '{' varID += [expr::Variable|QualifiedName]+ '}')?
;

StakeHolder:
	'stakeholder-name' name = STRING 
	'function' function = STRING 
	'comments' comments = STRING
;

TestSequence:
	'test-sequence' name = ID '{'
		stepSeqRef += [StepSequence|ID]+
	'}'
;

StepSequence:
	'step-sequence' name = ID '{'
		step += AbstractStep+
	'}'
;

AbstractStep:
    AssertionStep | RunStep
;

AssertionStep:
	'assertion-id' inputVar = [expr::Variable|ID]
	'assertion-type' type = [types::TypeDecl|ID]
	'assertion-input' stepVar = [expr::Variable|ID]
	('for-features' featuresForStep += [expr::Variable|ID]+ )?
    'assertion-items' '{' asserts += DataAssertions+ '}'
	refStep += RefStep*
;

RunStep:
	//'step-id' identifier = ID
	'step-id' inputVar = [expr::Variable|ID]
	'step-type' type = [types::TypeDecl|ID]
	'step-input' stepVar = [expr::Variable|ID]
	('for-features' featuresForStep += [expr::Variable|ID]+ )?
	refStep += RefStep*
	//('ref-to-step-output' input = ActionList)?
	//('output-data' output = ActionList)?
	//('local-parameters' localParams += Param+)? 
;

RefStep:
	'ref-to-step-output' input = ActionList 	('for-features' featuresToOutput += [expr::Variable|ID]+ )?
;

@Override
ModelContainer returns types::ModelContainer:
	super::ModelContainer | TSMain
;
