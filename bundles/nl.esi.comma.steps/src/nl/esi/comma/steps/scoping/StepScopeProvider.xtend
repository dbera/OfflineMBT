/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * generated by Xtext 2.19.0
 */
package nl.esi.comma.steps.scoping

import nl.esi.comma.steps.step.FeatureList
import nl.esi.comma.systemconfig.configuration.ConfigurationPackage
import nl.esi.comma.systemconfig.configuration.FeatureDefinition
import nl.esi.comma.types.utilities.CommaUtilities
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class StepScopeProvider extends AbstractStepScopeProvider {
	
	def IScope scope_FeatureDefinition(FeatureList context, EReference reference) {
		var featureDefintions = CommaUtilities::resolveProxy(context, this.
			getScope(context, ConfigurationPackage.Literals.FEATURE_DEFINITION__FEATURES).allElements)
			.filter[it.eContainer instanceof FeatureDefinition]
		return Scopes.scopeFor(featureDefintions)
	}
}
