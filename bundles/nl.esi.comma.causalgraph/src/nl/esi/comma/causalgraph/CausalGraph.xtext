/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
 
grammar nl.esi.comma.causalgraph.CausalGraph with nl.esi.comma.actions.Actions

generate causalGraph "http://www.esi.nl/comma/causalgraph/CausalGraph"

import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

@Override
ModelContainer returns types::ModelContainer:
    super::ModelContainer | CausalGraph
;

enum GraphType:
    cg = 'CausalGraph' |
    ucg = 'UnifiedCausalGraph' |
    rcg = 'ReducedCausalGraph' |
    bdducg = 'BDDUnifiedCausalGraph' |
    bddcg = 'BDDCausalGraph'
;

enum StepType:
    given = 'Given' |
    when = 'When' |
    then = 'Then' |
    and = 'And'
;

CausalGraph:
    imports += Import*
    scenarioIDDecl += ScenarioIDDecl*
    'graph' name=ID '{'
        'graph-type' graphType = GraphType
        ('target-language-imports' imp = STRING)?
        ('variables' vars+=(Variable|VarDecl)+)?
        ('function-signatures' func+=FunctionCallDecl+)?
        nodes += Node+
        cfedges += CFEdge*
        dfedges += DFEdge*
    '}'
;

ScenarioIDDecl:
    'scenario' ':' testID = TestID
;

VarDecl:
    'var-name' ':' name = ID 'type' ':' varType = STRING
;

TestID:
    name = ID
;

Node:
    'node' name=ID ':'
    'step-name' ':' stepName = STRING
    'step-type' ':' stepType = StepType
    ('step-args' ':' nodeVarDecls += NodeVarDecl+)?
    tests += TestBody+ 
;

NodeVarDecl:
    var = Variable (',')?
;

TestBody:
    'scenario' name=[TestID|ID] 'step' stepNum = INT
    ('requirement-id' ':' reqID += ID+)?
    ('arg-assign' ':' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
    'step-body' ':' stepBody += StepBody*
;

StepBody:
    TypedBody | StringBody
;

StringBody:
    id = STRING '<<' frag = STRING '>>'
;

TypedBody:
    id = STRING 'actions' act += Action+
;

DFEdge: 
    'data-flow-edge' src = [Node|ID] '--' refData += Ref+ '-->' dst = [Node|ID]
    // ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
;

Ref:
    RefData | RefTypedData
;

RefData:
    '{' tid = [TestID|ID] ':' '[' refVarList += [VarDecl|ID]+ ']' '}'
;

RefTypedData:
    '{' '[T]' tid = [TestID|ID] ':' '[' refVarList += [expr::Variable|ID]+ ']' '}'
;

CFEdge: 
    'control-flow-edge' src = [Node|ID] '-->' dst = [Node|ID]
    // ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
;



// Node:
//    'node' name=ID ':' ('local-variables' localVars+=Variable+)? 'actions' act += Action+
//    ('step-name' ':' stepName = STRING)?
//    // ('step-args' ':' stepArgsInitActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
//    ('step-args' ':' stepArgsInitActions+=KeyValuePair+)?
//    ('step-type' ':' stepType = StepType)?
//    ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
// ;
//KeyValuePair:
//    ('param' param = STRING 'value' value = STRING)?
//    'test-case-id' testCaseID = STRING 
//    'requirement-id' requirementID += STRING+
//    ('step-number' stepNum = INT)?
//;


//FunctionCallDecl: type = Type name = ID
//    '(' (args += Variable (',' args += Variable)*)? ')'
//;