/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
 
grammar nl.esi.comma.causalgraph.CausalGraph with nl.esi.comma.actions.Actions

generate causalGraph "http://www.esi.nl/comma/causalgraph/CausalGraph"

import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

@Override
ModelContainer returns types::ModelContainer:
    super::ModelContainer | CausalGraph
;

enum GraphType:
    cg = 'CausalGraph' |
    ucg = 'UnifiedCausalGraph' |
    rcg = 'ReducedCausalGraph' |
    bdducg = 'BDDUnifiedCausalGraph' |
    bddcg = 'BDDCausalGraph'
;

enum StepType:
    given = 'Given' |
    when = 'When' |
    then = 'Then' |
    and = 'And'
;

CausalGraph:
    imports += Import*
    requirements += RequirementDecl*
    scenarios += ScenarioDecl*
    'graph' name=ID
        'type' ':' graphType = GraphType
        ('language' ':' language = STRING)?
        ('header' ':' header = BODY)?
        ('types' ':' types += TypeDecl+)?
        ('functions' ':' func += FunctionDecl+)?
        ('variables' ':' vars += Variable+)?
        nodes += Node+
        'edges' ':' edges += Edge+
;

RequirementDecl:
    'requirement' name = ID
;

ScenarioDecl:
    'scenario' name = ID
;

@Ov@Override
TypeDecl returns types::TypeDecl:
	super | AliasTypeDecl
;

AliasTypeDecl:
    'alias' name = ID alias = STRING
;

Node:
    'node' name=ID ':'
    'step-name' ':' stepName = STRING
    'step-type' ':' stepType = StepType
    ('step-parameters' ':' stepParams += Variable+)?
    tests += ScenarioStep+
;

ScenarioStep:
    'scenario' name=[ScenarioDecl|ID] 'step' stepNum = INT ':'
    ('requirements' ':' reqID += [RequirementDecl|ID]+)?
    ('step-arguments' ':' stepArgs += (AssignmentAction | RecordFieldAssignmentAction)+)?
    'step-body' ':' stepBody = StepBody
;

StepBody:
    ActionsBody | LanguageBody
;

ActionsBody:
    actions += Action+
;

LanguageBody:
    body = BODY
;

Edge:
    ControlFlowEdge | DataFlowEdge
;

ControlFlowEdge:
    src = [Node|ID] '->' dst = [Node|ID]
;

DataFlowEdge: 
    src = [Node|ID] '-' '{' dataRefs += DataReference (',' dataRefs += DataReference)* '}' '->' dst = [Node|ID]
;

DataReference:
    scenario = [ScenarioDecl|ID] ':' (vars += [expr::Variable|ID] | '[' vars += [expr::Variable|ID] (',' vars += [expr::Variable|ID])* ']')
;

terminal BODY: '«' ( ('»»') | !('»') )* '»';