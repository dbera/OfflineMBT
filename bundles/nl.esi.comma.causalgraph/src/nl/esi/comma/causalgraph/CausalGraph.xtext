/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
 
grammar nl.esi.comma.causalgraph.CausalGraph with nl.esi.comma.actions.Actions

generate causalGraph "http://www.esi.nl/comma/causalgraph/CausalGraph"

import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

@Override
ModelContainer returns types::ModelContainer:
    super::ModelContainer | CausalGraph
;

CausalGraph:
    imports += Import*
    ('test-case-id' ':' testID += TestID+)?
    'graph' name=ID '{'
        ('language-imports' imp = STRING)?
        ('class-name' className = STRING)?
        ('variable-declarations' varDecl += VarDecl+)?
        'graph-type' graphType = GraphType
        ('variables' vars+=Variable+)?
        ('functions' func+=FunctionCallDecl+)?
        nodes += Node+
        // nodes += Node+
        cfedges += CFEdge*
        dfedges += DFEdge*
    '}'
;

VarDecl:
    'var-name:' name = ID 'language-type:' varType = STRING
;

TestID:
    name = ID
;

enum GraphType:
    cg = 'CausalGraph' |
    ucg = 'UnifiedCausalGraph' |
    rcg = 'ReducedCausalGraph' |
    bdducg = 'BDDUnifiedCausalGraph' |
    bddcg = 'BDDCausalGraph'
;

enum StepType:
    given = 'Given' |
    when = 'When' |
    then = 'Then' |
    and = 'And'
;

// Node:
//    'node' name=ID ':' ('local-variables' localVars+=Variable+)? 'actions' act += Action+
//    ('step-name' ':' stepName = STRING)?
//    // ('step-args' ':' stepArgsInitActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
//    ('step-args' ':' stepArgsInitActions+=KeyValuePair+)?
//    ('step-type' ':' stepType = StepType)?
//    ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
// ;


Node:
    'node' name=ID ':'
    tests += TestBody+ 
;

TestBody:
    'test' name=[TestID|ID] 
    '{'
        ('requirement-id' ':' reqID += ID+)?
        'step-name' ':' stepName = STRING
        'step-number' ':' stepNum = INT
        'step-type' ':' stepType = StepType
        ('step-args' ':' 
            localVars+=Variable+ 
            'values' ':' 
                initActions+=(AssignmentAction | RecordFieldAssignmentAction)+
        )?
        'step-body' ':' 
            'language' ':' lang = STRING
            'code-fragment' ':' frag = STRING
            // OR 'actions' act += Action+
    '}'
;


//KeyValuePair:
//    ('param' param = STRING 'value' value = STRING)?
//    'test-case-id' testCaseID = STRING 
//    'requirement-id' requirementID += STRING+
//    ('step-number' stepNum = INT)?
//;

DFEdge: 
    'data-flow-edge' src = [Node|ID] '-[' refData += Ref+ ']-|>' dst = [Node|ID]
    ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
;

Ref:
    RefData | RefTypedData
;

RefData:
    // tid = [TestID|ID] ':' '{' refVarList += [expr::Variable|ID]+ '}'?
    tid = [TestID|ID] ':' '{' refVarList += [VarDecl|ID]+ '}'?
;

RefTypedData:
    '[T]' tid = [TestID|ID] ':' '{' refVarList += [expr::Variable|ID]+ '}'?
;

CFEdge: 
    'control-flow-edge' src = [Node|ID] '-->' dst = [Node|ID]
    ('meta-data' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
;

//FunctionCallDecl: type = Type name = ID
//    '(' (args += Variable (',' args += Variable)*)? ')'
//;