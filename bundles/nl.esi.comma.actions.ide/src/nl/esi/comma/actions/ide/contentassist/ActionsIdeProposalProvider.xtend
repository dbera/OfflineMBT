/*
 * generated by Xtext 2.36.0
 */
package nl.esi.comma.actions.ide.contentassist

import nl.esi.comma.actions.actions.AssignmentAction
import nl.esi.comma.actions.actions.RecordFieldAssignmentAction
import nl.esi.comma.expressions.expression.ExpressionRecordAccess
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
class ActionsIdeProposalProvider extends AbstractActionsIdeProposalProvider {
    override protected _createProposals(Keyword keyword, ContentAssistContext context, IIdeContentProposalAcceptor acceptor) {
        super._createProposals(keyword, context, acceptor)
    }

    override protected _createProposals(CrossReference reference, ContentAssistContext context, IIdeContentProposalAcceptor acceptor) {
        super._createProposals(reference, context, acceptor)
    }

//    override protected getCrossrefFilter(CrossReference reference, ContentAssistContext context) {
//        return [description |
//            println(description.class)
//            return description instanceof EObjectDescription
//        ];
//    }

    override protected _createProposals(RuleCall ruleCall, ContentAssistContext context, IIdeContentProposalAcceptor acceptor) {
        super._createProposals(ruleCall, context, acceptor)
    }

    override protected _createProposals(Assignment assignment, ContentAssistContext context, IIdeContentProposalAcceptor acceptor) {
        super._createProposals(assignment, context, acceptor)

        val feature = assignment.feature
        switch (object: context.currentModel) {
            AssignmentAction case feature == 'exp': {
                createDefaultValue(object.assignment.type, object.assignment.name, context, acceptor)
            }
            RecordFieldAssignmentAction case feature == 'exp' && object.fieldAccess instanceof ExpressionRecordAccess: {
                val recordAccess = object.fieldAccess as ExpressionRecordAccess
                createDefaultValue(recordAccess.field.type, recordAccess.field.name, context, acceptor)
            }
        }
    }
}
