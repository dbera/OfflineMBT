/*
 * generated by Xtext 2.29.0
 */
package nl.asml.matala.product.scoping;

import java.util.ArrayList;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import nl.asml.matala.product.product.ProductPackage;
import nl.asml.matala.product.product.VarMap;
import nl.esi.comma.expressions.expression.Variable;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ProductScopeProvider extends AbstractProductScopeProvider {
	
	@Override
	public IScope getScope(EObject ctx, EReference ref) {
		/*if (ctx instanceof BlockIn && 
				ref == ProductPackage.Literals.BLOCK_IN__BIN) {
			return scope_BlockIn(ctx, ref);
		} else if (ctx instanceof BlockOut && 
				ref == ProductPackage.Literals.BLOCK_OUT__BOUT) {
			return scope_BlockOut(ctx, ref);
		} else if (ctx instanceof BlockMIn && 
				ref == ProductPackage.Literals.BLOCK_MIN__BIN) {
			return scope_BlockMIn(ctx, ref);
		} else if (ctx instanceof BlockMOut && 
				ref == ProductPackage.Literals.BLOCK_MOUT__BOUT) {
			return scope_BlockMOut(ctx, ref);
		} 
		else*/ 
		if (ctx instanceof VarMap && 
				ref == ProductPackage.Literals.VAR_MAP__VAR_REF) {
			return scope_VarConn(ctx, ref);
		}
		/*else if (ctx instanceof ExpressionVariable && 
				ref == ProductPackage.Literals.EXPRESSION_VARIABLE__BVARIABLE) {
			return scope_variable(ctx, ref);
		}*/
		else return super.getScope(ctx, ref);
	}

	/*IScope scope_variable(EObject context, EReference ref) {
		System.out.println(" > DEBUG: " + context + " - " + context.toString());
		
		var tmp = EcoreUtil2.getContainerOfType(context,ExpressionVariable.class);
		System.out.println("	> " + tmp);
		if(tmp!=null) {
			return Scopes.scopeFor(tmp.getBlockRef().getVars());
		}
		return super.getScope(context, ref);
	}*/
	
	IScope scope_VarConn(EObject ctx, EReference ref) {
		var outputList = new ArrayList<Variable>();
		outputList.addAll(EcoreUtil2.
			<VarMap>getContainerOfType(ctx, VarMap.class)
				.getBlockRef().getInvars());
		outputList.addAll(EcoreUtil2.
				<VarMap>getContainerOfType(ctx, VarMap.class)
					.getBlockRef().getOutvars());
		return Scopes.scopeFor(outputList);
	}
	
	/*IScope scope_BlockOut(EObject ctx, EReference ref) {
		var outputList = EcoreUtil2.
				<BlockOut>getContainerOfType(ctx, BlockOut.class).
				getBid().getOutput();
		return Scopes.scopeFor(outputList);
	}
	
	IScope scope_BlockIn(EObject ctx, EReference ref) {
		var inputList = EcoreUtil2.
				<BlockIn>getContainerOfType(ctx, BlockIn.class).
				getBid().getInput();
		return Scopes.scopeFor(inputList);
	}

	IScope scope_BlockMOut(EObject ctx, EReference ref) {
		var outputList = EcoreUtil2.
				<BlockMOut>getContainerOfType(ctx, BlockMOut.class).
				getBid().getMatOut();
		return Scopes.scopeFor(outputList);
	}
	
	IScope scope_BlockMIn(EObject ctx, EReference ref) {
		var inputList = EcoreUtil2.
				<BlockMIn>getContainerOfType(ctx, BlockMIn.class).
				getBid().getMatIn();
		return Scopes.scopeFor(inputList);
	}*/
}
