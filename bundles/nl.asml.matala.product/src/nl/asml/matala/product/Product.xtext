grammar nl.asml.matala.product.Product with nl.esi.comma.actions.Actions // with org.eclipse.xtext.common.Terminals

generate product "http://www.asml.nl/matala/product/Product"

import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

@Override
ModelContainer returns types::ModelContainer:
	super::ModelContainer | Product
;

Product:
	imports += Import*
	(namespace += NameSpace)*
    types += TypeDecl*
	( systemDecl = SystemDecl	
	| specification = Specification)
;

@Override
NamedElement returns types::NamedElement:
	name=QualifiedName | SystemDecl
;

SystemDecl:
	'system' 'declarations' name = ID '{'
		block += Block*
		// if it works, make it recursive
	'}'
;

Specification:
	'specification' name = ID '{'
		blocks += Blocks+
		('SUT-blocks' envBlock += [Block|QualifiedName]*)?
		'depth-limits' limit = INT
	'}'
;

Blocks:
	( block = Block
	| refBlock = RefBlock
	)
;


RefBlock:
	'reference' 'system' system = [Block|QualifiedName]
;

Block:
	'system' name = ID '{'
		( // Unordered group for following items
			('inputs' invars+=Variable* )? &
			('outputs' outvars+=Variable* )? &
			('local' localvars+=Variable* )? &
			('init' initActions+=(AssignmentAction | RecordFieldAssignmentAction)*)? &
			'desc' type = STRING
		)
		functions += Function*
	'}'
;

Function:
	'action' name = ID
	updates += Update*
;

Update:
	'case' name = ID 
	('step-type' stepType = STRING 'action-type' actionType = ActionType)?
	('with-inputs' fnInp += VarRef (',' fnInp+=VarRef)*)?
	('with-guard' guard=Expression?)?
	updateOutputVar += UpdateOutVar*
;

enum ActionType:
	INTERNAL | COMPOSE | RUN
;

UpdateOutVar:
	'produces-outputs'  fnOut += VarRef (',' fnOut+=VarRef)* (assert?='assert'?) (suppress?='suppress'?)
	('updates' hiddenVars += Variable* ':' act = ActionList)?
;

VarRef:
	opt?='opt'? init?='init'? 
	ref = [expr::Variable|ID] 
	(dataConstraints = DataConstraints)?
	(dataReferences = DataReferences)? 
;

DataConstraints: {DataConstraints}
	'constraints' '{' 
		constr += SymbConstraint*
	 '}'
;

DataReferences: {DataReferences}
	'references' '{' 
		constr += RefConstraint*
	 '}'
;

RefConstraint:
	name=ID ':' act = ActionList
;

SymbConstraint:
	name=ID ':' symbExpr = Expression
;
