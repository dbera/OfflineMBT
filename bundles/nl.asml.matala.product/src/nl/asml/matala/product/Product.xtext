grammar nl.asml.matala.product.Product with nl.esi.comma.actions.Actions // with org.eclipse.xtext.common.Terminals

generate product "http://www.asml.nl/matala/product/Product"

import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

Product:
	imports += Import*
	'specification' name = ID '{'
		//topology += Topology*
		block += Block*
		('environment-blocks' envBlock += [Block|ID]*)?
		'depth-limits' limit = Int
	'}'
;

@Override
ModelContainer returns types::ModelContainer:
	super::ModelContainer | Product
;

Topology:
	'Topology-Def' name = ID '{'
		flow += Flow*
	'}'
;

Flow:
	'input-connections' name = [Block|ID] '{'
		varConn += VarConnection*		
	'}'
;

VarConnection:
	varRefLHS = VarMap '<-' varRefRHS = VarMap
;

Block:
	'system' name = ID '{'
		('inputs' invars+=Variable+ )?
		('outputs' outvars+=Variable+)?
		('local' localvars+=Variable+ )?
		('init' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
		'desc' type = STRING
		functions += Function*
	'}'
;

Function:
	'action' name=ID  
	updates += Update*
;

Update:
	'case' name = ID 
	('with-inputs' fnInp += VarRef (',' fnInp+=VarRef)*  )?
	('with-guard' guard=Expression)?
	updateOutputVar += UpdateOutVar*
	// ('updates' act = ActionList)?
	// ('produces-outputs'  fnOut += VarRef (',' fnOut+=VarRef)*)?
;

UpdateOutVar:
	'produces-outputs'  fnOut += VarRef (',' fnOut+=VarRef)* (assert?='assert'?)
	('updates' hiddenVars += Variable* ':' act = ActionList)?
;

VarRef:
	opt?='opt'? init?='init'? 
	ref = [expr::Variable|ID] 
	(dataConstraints = DataConstraints)? 
;

DataConstraints:
	'constraints' '{' 
		constr += Constraint+
	 '}'
;

Constraint:
	name=ID ':' symbExpr=Expression
;

VarMap:
	blockRef = [Block|ID] '.' varRef = [expr::Variable|ID] 
;


/////////DEPRECATE//////////////
/*
 * 		outIn += OutInConnector*
		moutIn += MOutInConnector*
 
 * 		('in' input += BInput*)?
		('out' output += BOutput*)?
		('mat-in' matIn += MInput*)?
		('mat-out' matOut += MOutput*)?
		operation += Operation*
 
 */

Operation:
	'op' name=ID '{'
		io += OpConnector*
	'}'
;


MInOutConnector:
	sbid = BlockMIn '->' tbid = BlockMOut
;

MOutInConnector:
	sbid = BlockMOut '->' tbid = BlockMIn
;

BlockMIn:
	'mat' bid = [Block|ID] '.' bin = [MInput|ID]
;

BlockMOut:
	'mat' bid = [Block|ID] '.' bout = [MOutput|ID]
;

OpConnector:
	name = ID '{' opPrefix += OpPrefix* '}' '->' '{' opPostFix += OpPostFix* '}'
;

OpPrefix:
	BlockMIn | BlockIn
;

OpPostFix:
	BlockMOut | BlockOut
;

InOutConnector:
	sbid = BlockIn '->' tbid = BlockOut
;

OutInConnector:
	sbid = BlockOut '->' tbid = BlockIn
;

BlockIn:
	'data' bid = [Block|ID] '.' bin = [BInput|ID]
;

BlockOut:
	'data' bid = [Block|ID] '.' bout = [BOutput|ID]
;

BInput:
	name=ID
;

BOutput:
	name=ID
;

MInput:
	name=ID
;

MOutput:
	name=ID
;