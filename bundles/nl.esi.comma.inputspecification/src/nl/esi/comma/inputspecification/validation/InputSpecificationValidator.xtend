/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * generated by Xtext 2.12.0
 */
package nl.esi.comma.inputspecification.validation

import nl.esi.comma.types.types.Import
import nl.esi.comma.types.types.TypesPackage
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.validation.Check

//import nl.esi.comma.systemconfig.configuration.FeatureDefinition

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class InputSpecificationValidator extends AbstractInputSpecificationValidator {
	
	@Check
	override checkImportForValidity(Import imp){
		if(! EcoreUtil2.isValidUri(imp, URI.createURI(imp.importURI)))
			error("Invalid resource", imp, TypesPackage.eINSTANCE.import_ImportURI)
		else{
			/*val Resource r = EcoreUtil2.getResource(imp.eResource, imp.importURI)
			if(! (r.allContents.head instanceof InterfaceDefinition ||
				r.allContents.head instanceof FeatureDefinition
			))
				error("The imported resource is not an interface definition or a feature definition.", imp, TypesPackage.eINSTANCE.import_ImportURI)
		}*/
		
		}
	}
}
