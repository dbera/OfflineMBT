grammar nl.esi.comma.inputspecification.InputSpecification with nl.esi.comma.actions.Actions

generate inputSpecification "http://www.esi.nl/comma/inputspecification/InputSpecification"

// import "http://www.esi.nl/comma/behavior/interfaces/InterfaceDefinition" as intdef
//import "http://www.esi.nl/comma/behavior/Behavior" as sm
import "http://www.esi.nl/comma/signature/InterfaceSignature" as sig 
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr

Main:
	imports += Import*
	model = ModelType
;

ModelType:
	APIDefinition | SUTDefinition | TestDefinition
;

SUTDefinition:
	('sut-instances' vars+=Variable+)
	('sut-init' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
	('sut-implementation' sutImpl += SUTAPIImplementation+)?
	('sut-definition'
		('var-to-suts' '{' varToSut += VarToSUT+ '}')?
		configSpace += ConfigurationSpace+
		sutDef += SUTDef+ 
		sut = SUT
		'generate-file' file = STRING
		generic = Generic
	)?
;

ConfigurationSpace:
	'test-configuration' name = ID '{' feature += [expr::Variable|ID]+ '}'
;

VarToSUT:
	varref = [expr::Variable|ID] '->' sutref = [SUTDef|ID]
;

APIDefinition:
	'data-instances' vars+=Variable+
	('data-init' initActions+=(AssignmentAction | RecordFieldAssignmentAction)+)?
	'data-implementation' apiImpl += SUTAPIImplementation+
;

SUTAPIImplementation:
	'path-prefix' path = STRING di += DataImpl+
;

DataImpl:
	'var-ref' var = [expr::Variable|ID] '->' 'file-name' fname = STRING
;


TestDefinition:
	('global-parameters' gparams+=Variable+)?
	('sut-parameters' sutparams+=Variable+)?
	('global-param-init' gparamsInitActions+=(AssignmentAction | 
								RecordFieldAssignmentAction)+)?
	('sut-param-init' sutInitActions+=(AssignmentAction | 
								RecordFieldAssignmentAction)+)?
	'Step-Sequence' '{'
		step += Step+
	'}'
;

Step:
	'step-id' identifier = ID
	'rcs-type' type = [types::TypeDecl|ID]
	'input-data' input = ActionList
	('output-data' output = ActionList)?
	//('local-parameters' localParams += Param+)? 
;

/*Param:
	name=ID ':' value += STRING+
;*/

@Override
ModelContainer returns types::ModelContainer:
	super::ModelContainer | Main
;

Generic:
	'meta-data' '{'
		'def' VirtualFabDefinition = STRING
		'xsi' XSI = STRING
		'loc' SchemaLocation = STRING
		'title' Title = STRING
	'}'	
;


SUT:
	'suts' '{'
		'sut-name' name = ID
		'description' desc = STRING
		'sut-defs' sutDefRef += [SUTDef|ID]+
	'}'
;

SUTDef:
	TWINSCANKT | LISVCP
;

TWINSCANKT:
	'twinscan-kt' '{'
		'twinscan-name' name = ID
		'type' type = STRING
		'scenario-param-name' ScenarioParameterName = STRING
		'machine-id' machineID = STRING
		'cpu-cores' CPU = Int
		'memory-size' Memory = Int
		'machine-type' MachineType = STRING
		(useExisting?='use-existing')?
		'sw-baseline' baseline = STRING
		'opts' '{'
			options += Option*
		 '}'
		 'commands' commands += STRING*
	'}'
;

Option:
	'{' 'opt-name' optionname = STRING
		'opt-value' value = STRING
		(isSVP?='svp')? 
	'}'
;

LISVCP:
	'lis-vcp' '{'
		'lis-name' name = ID
		'type' type = STRING
		'scenario-param-name' ScenarioParameterName = STRING
		'address' address = STRING
		'job-config-list' '{' 
			jobConfigList += JobConfig*
		'}'
	'}'
;

JobConfig:
	'{' 
		'app-id' appID = STRING
		'fun-id'	 fnId = STRING
		(actDocColl?='active-document-collection')? 
	'}' 
;

/*Applications:
	
;*/


//////////////////////// OBSOLETE ////////////////////////////////

TagText:
	(command ?= 'command')? 'tag' tag += (EventTag | EventOutcomeTag)+
;

EventTag:
	'action' eventTag = STRING
;

EventOutcomeTag:
	'data' (value += Expression (',' value += Expression)*)? '->' eventOutcomeTag = STRING
;

/*EventData:
	'state:' state = [sm::State] ('select-transition-clause-id:' evtInst += EventInstance+ )? params += EventParams*
;*/

Tail:
	('non-trigger:' niEvent = [sig::InterfaceEvent])
	(tags += TagText*)
;

EventInstance:
	'(' instanceID = Int ':' '(' evtCl += EventClause+ ')' params += EventParams* ')'
;

EventClause:
	clauseID = Int | ',' clauseID = Int
;

EventParams: {EventParams}
	'params:' '(' (value += Expression (',' value += Expression)*)? ')' ('feature-expr:' config = Expression)?
;
