/*
 * generated by Xtext 2.10.0
 */
package nl.esi.comma.behavior.validation

import java.util.ArrayList
import java.util.List
import nl.esi.comma.actions.actions.ActionsPackage
import nl.esi.comma.actions.actions.VariableDeclBlock
import nl.esi.comma.behavior.behavior.AbstractBehavior
import nl.esi.comma.expressions.expression.ExpressionVariable
import nl.esi.comma.expressions.expression.Variable
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class BehaviorValidator extends DataConstraintsValidator {
	
	public static final String STATEMACHINE_DUPLICATE_INTERFACE = "statemachine_duplicate_interface"
	public static final String STATEMACHINE_UNUSED_INTERFACE = "statemachine_unused_interface"
	public static final String STATEMACHINE_DUPLICATE_STATE = "statemachine_duplicate_state"
	public static final String STATEMACHINE_DUPLICATE_VAR = "statemachine_duplicate_var"
	public static final String STATEMACHINE_UNITIALIZED_VAR = "statemachine_uninitialized_var"
	public static final String STATEMACHINE_UNUSED_VAR = "statemachine_unused_var"
	
	/*
	 * Constraints:
	 * - warning on uninitialized variables used in state machines.
	 * 
	 * Note: variables in constraint blocks cannot be initialized
	 */
	@Check
	override checkNotInitializedVariables(VariableDeclBlock block){
		if(block instanceof AbstractBehavior) super.checkNotInitializedVariables(block)
	}
	
	/*
	 * Constraints:
	 * - state machine names are unique
	 */
	@Check
	def checkDuplicatedMachineNames(AbstractBehavior spec) {
		checkForNameDuplications(spec.machines, "state machine", null)
	}
	
	/*
	 * Constraints:
	 * - state names are unique across all machines
	 */
	@Check
	def checkDuplicateStateNames(AbstractBehavior spec){
		checkForNameDuplications(spec.machines.map[states].flatten, "state", null)
	}
	
	/*
	 * Constraints:
	 * - fragment names are unique
	 */
	@Check
	def checkDuplicatePCFragmentNames(AbstractBehavior spec){
		checkForNameDuplications(spec.fragments, "event fragment", null)
	}
	
	/*
	 * Constraints:
	 * - warning on unused global variables. Used means referred to in an expression
	 */
	@Check
	def checkUnusedGlobalVariables(AbstractBehavior spec){
		val List<Variable> variables = new ArrayList<Variable>()
		variables.addAll(spec.vars)
		variables.removeAll(EcoreUtil2.getAllContentsOfType(spec, ExpressionVariable).map[variable]) //Potentially expensive...
		for (v : variables) {
			warning('Unused variable.', ActionsPackage.Literals.VARIABLE_DECL_BLOCK__VARS,
				spec.vars.indexOf(v))
		}
	}
}
