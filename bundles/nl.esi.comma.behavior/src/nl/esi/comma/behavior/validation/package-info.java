
package nl.esi.comma.behavior.validation;
/*
The validator has been split into many classes.
Every class has methods that have the same input and the class is named from that input.

eg: CommandsValidator.xtend contains methods like

	@Check
	def checkReply(Command r) {}

Exception is the StateMachineValidator that has some methods with different inputs and the TimeConstraintValidator
that has some methods that have different inputs but they have to do with time constraints.

The StateMachineValidator.xtend is the original class that was generated by xtext and contains the command

@ComposedChecks(validators=#[VasileiosModificationsValidator,EventValidator,InterfaceBehaviorValidator
 							,TransitionValidator, CommandsValidator,ExpressionsValidator])
 
which splits the validator into the aforementioned classes.

StateMachineValidator is the only class that extends DataConstraintValidator. This is because some of the 
DataConstraintsValidator are used in another project and this must be done through the StateMachineValidator.

Every other class has the method

def register(AbstractStateMachineValidator registrar) {
		// not needed for classes used as ComposedCheck
	}

which is there to prevent running the same test 2 times if it exists in more than one class.
*/


