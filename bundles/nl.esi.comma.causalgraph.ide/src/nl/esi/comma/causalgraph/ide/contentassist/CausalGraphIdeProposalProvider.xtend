/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
/*
 * generated by Xtext 2.36.0
 */
package nl.esi.comma.causalgraph.ide.contentassist

import com.google.inject.Inject
import nl.esi.comma.causalgraph.services.CausalGraphGrammarAccess
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry
import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
class CausalGraphIdeProposalProvider extends AbstractCausalGraphIdeProposalProvider {
    @Inject
    @Extension
    CausalGraphGrammarAccess grammarAccess

    override protected _createProposals(Assignment assignment, ContentAssistContext context,
        IIdeContentProposalAcceptor acceptor) {
        super._createProposals(assignment, context, acceptor)

        val terminal = assignment.terminal
        if (terminal instanceof RuleCall) {
            if (terminal.rule == BODYRule) {
                val proposal = proposalCreator.createProposal('«»', context, [ entry |
                    entry.kind = ContentAssistEntry.KIND_SNIPPET
                    entry.label = '«»'
                    entry.description = 'Code snippet'
                    entry.documentation = 'Code snippet'
                ])
                if (proposal !== null) {
                    acceptor.accept(proposal, TEMPLATE_DEFAULT_PRIORITY);
                }
            }
        }
    }
}
