/*
 * generated by Xtext 2.10.0
 */
package nl.esi.comma.expressions.ui.contentassist

import com.google.inject.Inject
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import nl.esi.comma.expressions.expression.ExpressionVector
import nl.esi.comma.types.types.RecordTypeDecl

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class ExpressionProposalProvider extends AbstractExpressionProposalProvider {
	@Inject
	protected IScopeProvider scopeProvider;
	
	override completeExpressionTypeAnnotated_Elements(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	   super.completeExpressionTypeAnnotated_Elements(model, assignment, context, acceptor)
	   if(model instanceof ExpressionVector){
	       if(model.typeAnnotation.type.type instanceof RecordTypeDecl){
	           acceptRecord(model, assignment, context, acceptor)
	       }
	   }
	}
	
	def acceptRecord(EObject object, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        if (object instanceof ExpressionVector) {
            var type = object.typeAnnotation.type.type
            if (type instanceof RecordTypeDecl) {
                var fields = type.fields
                val prop = '''
                        «type.name» {«FOR field : fields SEPARATOR ","»«field.name» = «ProposalHelper.defaultValue(field.type)»«ENDFOR»}
                '''
                acceptor.accept(createTemplate("Record "+type.name, prop, "", 0, context, 1000, -1, -1))
            }
        }
    }
}
