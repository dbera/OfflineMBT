/*
 * generated by Xtext 2.10.0
 */
package nl.esi.comma.behavior.ui.contentassist

import nl.esi.comma.actions.actions.CommandReply
import nl.esi.comma.behavior.behavior.State
import nl.esi.comma.behavior.behavior.StateMachine
import nl.esi.comma.behavior.behavior.TriggeredTransition
import nl.esi.comma.signature.interfaceSignature.Command
import nl.esi.comma.signature.interfaceSignature.InterfaceSignaturePackage
import nl.esi.comma.signature.interfaceSignature.Parameter
import nl.esi.comma.signature.interfaceSignature.Signature
import nl.esi.comma.types.types.EnumTypeDecl
import nl.esi.comma.types.types.RecordTypeDecl
import nl.esi.comma.types.types.SimpleTypeDecl
import nl.esi.comma.types.types.TypeReference
import nl.esi.comma.types.types.VectorTypeDecl
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.jface.viewers.StyledString
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import nl.esi.comma.behavior.behavior.BehaviorPackage

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class BehaviorProposalProvider extends AbstractBehaviorProposalProvider {

	protected Image templateIcon;

	final int TEMPLATE_DEFAULT_PRIORITY = 600;
	final int TEMPLATE_HIGH_PRIORITY = 700;
	final int TEMPLATE_LOW_PRIORITY = 599;

	// UI TEXT
	public static String STATEMACHINE_TITLE = "StateMachine"
	static String STATEMACHINE_INFO = "The state machine is a model that can be in exactly one of a number of states"

	public static String STATE_TITLE = "State definition"
	static String STATE_INFO = "The state is an unique configuration of information in the state machine"

	public static String INITIAL_STATE_TITLE = "Initial state"
	static String INITIAL_STATE_INFO = "The initial state is the default starting state of the state machine"

	public static String IN_ALL_STATES_TITLE = "In all states"
	static String IN_ALL_STATES_INFO = "\"in all states\" contains the transitions that are defined in every state."
	
	public static String IN_ALL_STATES_EXCEPT_TITLE = "In all states except"
	static String IN_ALL_STATES_EXCEPT_INFO = "\"in all states except\" contains the transitions that are defined in every state except in the provided states."

	public static String TRANSITION_TITLE = "Transition definition"
	static String TRANSITION_INFO = "The transition describes when and how to go to the next state."

	public static String TRANSITION_GUARD_TITLE = "Transition with guard"
	static String TRANSITION_GUARD_INFO = "Transitions may have a guard expressed as a boolean expression. Transition is performed if the guard evaluates to true"

	public static String TRANSITION_TRIGGER_TITLE = "Transition trigger"
	static String TRANSITION_TRIGGER_INFO = "Transitions may be triggered by a call to a command or a signal."

	public static String TRANSITION_TRIGGER_GUARD_TITLE = "Transition trigger guard"
	static String TRANSITION_TRIGGER_GUARD_INFO = "Transitions may be triggered by an interface event (command, signal, notification) and may have a guard that is a precondition for the transition"

	static String NOTIFICATION_INFO = "Available notification from the imported signature."

	static String TIME_C_ID = "TimeConstraint"
	static String DATA_C_ID = "DataConstraint"
	static String GENERIC_C_ID = "GenericConstraint" 

	public static final String INITIAL_STATE_PROPOSAL = '''		
		initial state NewState {
			transition
				next state: NewState
		}
	'''

	new() {
		templateIcon = ImageDescriptor.createFromURL(
			BehaviorProposalProvider.getResource("/icons/icon_template_behavior.png")).createImage();
	}

	protected def createTemplate(String name, String content, String additionalInfo, Integer nrIndents,
		ContentAssistContext context, int selection, int length) {
		createTemplate(name, content, additionalInfo, nrIndents, context, TEMPLATE_DEFAULT_PRIORITY, selection, length)
	}
	
	protected def createTemplate(String name, String content, String additionalInfo, Integer nrIndents,
		ContentAssistContext context) {
			createTemplate(name,content, additionalInfo, nrIndents, context, TEMPLATE_DEFAULT_PRIORITY, -1 ,-1)			
		}
	
	protected def createTemplate(String name, String content, String additionalInfo, Integer nrIndents,
		ContentAssistContext context, int priority) {
			createTemplate(name,content, additionalInfo, nrIndents, context, priority, -1 ,-1)			
		}
		
	private def createProposal(String name, String content, String additionalInfo, ContentAssistContext context,
		int priority, int selection, int length) {

		var finalAdditionalInfo = content
		val proposal = createHtmlCompletionProposal(content, new StyledString(name), templateIcon,
			TEMPLATE_DEFAULT_PRIORITY, context);

		if (proposal instanceof ConfigurableCompletionProposal) {
			while (finalAdditionalInfo.startsWith("\n") || finalAdditionalInfo.startsWith("\r")) {
				finalAdditionalInfo = finalAdditionalInfo.substring(1);
			}
			finalAdditionalInfo = "<html><body bgcolor=\"#FFFFE1\"><style> body { font-size:9pt; font-family:'Segoe UI' }</style><pre>" +
				finalAdditionalInfo + "</pre>";
			if (additionalInfo !== null) {
				finalAdditionalInfo = finalAdditionalInfo + "<p>" + additionalInfo + "</p>";
			}
			finalAdditionalInfo = finalAdditionalInfo + "</body></html>"
			proposal.additionalProposalInfo = finalAdditionalInfo
			proposal.proposalContextResource = context.resource			
			proposal.priority = priority
			proposal.selectionStart = context.offset + selection
			proposal.selectionLength = length			
		}
		proposal
	}

	private def createHtmlCompletionProposal(String proposal, StyledString displayString, Image image, int priority,
		ContentAssistContext context) {
		if (isValidProposal(proposal, context.getPrefix(), context)) {
			return doCreateHtmlCompletionProposal(proposal, displayString, image, priority, context);
		}
		return null;
	}

	private def doCreateHtmlCompletionProposal(String proposal, StyledString displayString, Image image, int priority,
		ContentAssistContext context) {
		val replacementOffset = context.getReplaceRegion().getOffset();
		val replacementLength = context.getReplaceRegion().getLength();
		val result = new HtmlConfigurableCompletionProposal(proposal, replacementOffset, replacementLength,
			proposal.length(), image, displayString, null, null);

		result.priority = priority
		result.matcher = context.matcher
		result.replaceContextLength = context.replaceContextLength
		result;
	}

	override completeExpressionEnumLiteral_Interface(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeExpressionEnumLiteral_Interface(model, assignment, context, acceptor)
		val type = getEnumType(model)
		if (type !== null) {
			val signature = EcoreUtil2.getContainerOfType(type, Signature)

			for (literals : type.literals) {
				acceptor.accept(
					createDescriptionProposal(signature.name + "::" + type.name + "::" + literals.name, literals,
						context));
			}
		}
	}

	override completeExpressionEnumLiteral_Type(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeExpressionEnumLiteral_Type(model, assignment, context, acceptor)

		val previous = context.currentNode?.previousSibling?.previousSibling?.text
		val type = getEnumType(model)
		if (type !== null && previous !== null) {
			val prefix = if(previous.equals(type.name)) "" else type.name + "::"
			for (literals : type.literals) {
				acceptor.accept(createDescriptionProposal(prefix + literals.name, literals, context));
			}
		}
	}

	def getEnumType(EObject model) {
		if (model instanceof CommandReply) {
			val transition = EcoreUtil2.getContainerOfType(model, TriggeredTransition)
			if (transition.trigger instanceof Command) {
				val type = (transition.trigger as Command).type
				if (type instanceof TypeReference) {
					val dType = type.type
					if (dType instanceof EnumTypeDecl) {
						return dType as EnumTypeDecl
					}
				}
			}
		}
		return null
	}

	def ICompletionProposal createDescriptionProposal(String proposalString, EObject obj,
		ContentAssistContext context) {
		val proposal = createCompletionProposal(proposalString, new StyledString(proposalString), null, 500,
			context.getPrefix(), context);
		if (proposal instanceof ConfigurableCompletionProposal) {
			(proposal as ConfigurableCompletionProposal ).setAdditionalProposalInfo(obj);
			(proposal as ConfigurableCompletionProposal  ).setHover(hover);
			(proposal as ConfigurableCompletionProposal  ).setProposalContextResource(context.getResource());
		}
		return proposal;
	}

	override complete_StateMachine(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_StateMachine(model, ruleCall, context, acceptor)

		addStatemachineTemplate(context, acceptor)

	}

	def addStatemachineTemplate(ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val id = "StateMachine"
		val prop = '''
			machine «id» {
				
				initial state initialState {
					
				}
			}
		'''
		acceptor.accept(createTemplate(STATEMACHINE_TITLE, prop, STATEMACHINE_INFO, 0, context, 8, id.length))
	}

	override completeStateMachine_States(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeStateMachine_States(model, assignment, context, acceptor)

		addInitialState(model, context, acceptor)
		addState(model, context, acceptor)
	}

	def addState(EObject object, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val id = "NewState"
		val proposal = '''
			state «id» {
				transition
					next state: NewState
			}
		'''
		acceptor.accept(createTemplate(STATE_TITLE, proposal, STATE_INFO, 1, context, 6, id.length))
	}

	def addInitialState(EObject object, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (object instanceof StateMachine) {
			if (statemachinContainsInitialState(object)) {
				acceptor.accept(
					createTemplate(INITIAL_STATE_TITLE, INITIAL_STATE_PROPOSAL, INITIAL_STATE_INFO, 1, context))
			}
		}
	}


	
	

	override complete_InAllStatesBlock(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_InAllStatesBlock(model, ruleCall, context, acceptor)
		val proposal = '''
			in all states {
				
			}
		'''
		acceptor.accept(createTemplate(IN_ALL_STATES_TITLE, proposal, IN_ALL_STATES_INFO, 1, context))
		
		
		val states = scopeProvider.getScope(model, BehaviorPackage.Literals.STATE_MACHINE__STATES)
		var except = "state1"
		if(!states.allElements.empty) {			
			except = states.allElements.get(0).name.lastSegment			
		}
		val exceptProposal = '''
			in all states except «except» {
				
			}
		'''
		
		acceptor.accept(createTemplate(IN_ALL_STATES_EXCEPT_TITLE, exceptProposal, IN_ALL_STATES_EXCEPT_INFO, 1, context, 23, except.length))
	}	

	override completeState_Transitions(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeState_Transitions(model, assignment, context, acceptor)
		var nextState = "NextState"
		if (model instanceof State) {
			nextState = model.name
		}
		addTransition(model, nextState, context, acceptor)
		addTransitionTrigger(model, nextState, context, acceptor)
		addTransitionGuard(model, nextState, context, acceptor)
		addTransitionTriggerGuard(model, nextState, context, acceptor)
	}

	override complete_Transition(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_Transition(model, ruleCall, context, acceptor)
		var nextState = "NextState"
		addTransition(model, nextState, context, acceptor)
		addTransitionTrigger(model, nextState, context, acceptor)
		addTransitionGuard(model, nextState, context, acceptor)
		addTransitionTriggerGuard(model, nextState, context, acceptor)
	}

	def addTransitionTrigger(EObject object, String nextState, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val id = "interfaceEvent"
		val proposal = '''
			transition trigger: «id»
				do: reply(*)
				next state: «nextState»
		'''
		acceptor.accept(createTemplate(TRANSITION_TRIGGER_TITLE, proposal, TRANSITION_TRIGGER_INFO, 2, context, 20, id.length))
	}

	def addTransitionGuard(EObject object, String nextState, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val guard = "true"
		val proposal = '''
			transition guard: «guard»
				next state: «nextState»
		'''
		acceptor.accept(createTemplate(TRANSITION_GUARD_TITLE, proposal, TRANSITION_GUARD_INFO, 2, context, 18, guard.length))
	}

	def addTransitionTriggerGuard(EObject object, String nextState, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val id = "interfaceEvent"
		val proposal = '''
			transition trigger: «id» guard: true
				do: reply(*)
				next state: «nextState»
		'''
		acceptor.accept(
			createTemplate(TRANSITION_TRIGGER_GUARD_TITLE, proposal, TRANSITION_TRIGGER_GUARD_INFO, 2, context,
				TEMPLATE_LOW_PRIORITY, 20, id.length))
	}

	def addTransition(EObject object, String nextState, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val proposal = '''
		transition
			next state: «nextState»'''
		acceptor.accept(createTemplate(TRANSITION_TITLE, proposal, TRANSITION_INFO, 2, context, TEMPLATE_HIGH_PRIORITY))
	}

	private def statemachinContainsInitialState(StateMachine machine) {
		if (machine.states.filter(s|s.initial).size() == 0) {
			return true;
		} else {
			return machine.states.filter(s|s.initial).size() > 1
		}
	}

	override completeClause_Actions(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeClause_Actions(model, assignment, context, acceptor)
		val signatures = scopeProvider.getScope(model,
			InterfaceSignaturePackage.Literals.INTERFACE_SIGNATURE_DEFINITION__SIGNATURE).allElements

		for (signatureDescription : signatures) {
			val object = signatureDescription.EObjectOrProxy
			val signature = (if(object.eIsProxy) EcoreUtil2.resolve(object, model) else object) as Signature

			for (notification : signature.notifications) {
				val parameters = notification.parameters
				var String title
				var String proposal

				if (!parameters.isNullOrEmpty) {
					title = '''«notification.name»(«FOR param : parameters»«paramTypeToString(param)»«IF parameters.last !== param», «ENDIF»«ENDFOR»)'''
					proposal = '''«notification.name»(«FOR param : parameters»«paramToString(param)»«IF parameters.last !== param», «ENDIF»«ENDFOR»)'''
				} else {
					title = notification.name
					proposal = notification.name
				}

				acceptor.accept(createProposal(title, proposal, NOTIFICATION_INFO, context, TEMPLATE_HIGH_PRIORITY, -1, -1))
			}
		}
	}

	def paramTypeToString(Parameter param) {
		val type = param.type
		if (type instanceof TypeReference) {
			val typeDecl = (type as TypeReference).type
			return typeDecl.name
		}
		return "param"
	}

	def paramToString(Parameter param) {
		val type = param.type
		if (type instanceof TypeReference) {
			val typeDecl = (type as TypeReference).type
			if (typeDecl instanceof SimpleTypeDecl) {
				switch (typeDecl.name) {
					case "int": {
						return "0"
					}
					case "any": {
						return "1"
					}
					case "string": {
						return "\"value\""
					}
					default: {
						return typeDecl.name
					}
				}
			} else if (typeDecl instanceof EnumTypeDecl) {
				return (typeDecl.eContainer as Signature).name + "::" + typeDecl.name + "::" +
					typeDecl.literals.get(0).name
			} else if (typeDecl instanceof VectorTypeDecl) {
				return "[0]"
			} else if (typeDecl instanceof RecordTypeDecl) {
				return "[0]"
			} else {
				return typeDecl.name
			}
		}
		return "param"
	}
	
	/************************************ Constraints ************************************/
	
	override complete_TimeConstraintsBlock(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_TimeConstraintsBlock(model, ruleCall, context, acceptor)
		val prop ='''timing constraints
		'''
		acceptor.accept(createTemplate("Timing constraints", prop, "", 0, context))
	}
	
	override complete_GenericConstraintsBlock(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_GenericConstraintsBlock(model, ruleCall, context, acceptor)	
		val prop ='''generic constraints
		'''	
		acceptor.accept(createTemplate("Generic constraints", prop, "", 0, context))
	}
	
	override complete_DataConstraintsBlock(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DataConstraintsBlock(model, ruleCall, context, acceptor)
		val prop ='''data constraints
		'''
		acceptor.accept(createTemplate("Data constraints", prop, "", 0, context))
	}
	
	override complete_TimeConstraint(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_TimeConstraint(model, ruleCall, context, acceptor)
		
		acceptTimeConstraintExample(model, ruleCall, context, acceptor)
		acceptTimeConstraintInterval(model, ruleCall, context, acceptor)
		acceptTimeConstraintConditioned(model, ruleCall, context, acceptor)
		acceptTimeConstraintAbsence(model, ruleCall, context, acceptor)
		acceptTimeConstraintPeriodic(model, ruleCall, context, acceptor)
	}
	
	def acceptTimeConstraintPeriodic(EObject object, RuleCall call, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		val prop ='''«TIME_C_ID» reply(*) to command Command then notification Notification with period 2000.0 ms jitter 10.0 ms until signal Signal
		'''
		acceptor.accept(createTemplate("Time Constraint Periodic", prop, "Example of a periodic time constraint.", 0, context, 0, TIME_C_ID.length))
	}
	
	def acceptTimeConstraintAbsence(EObject object, RuleCall call, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {		
		val prop ='''«TIME_C_ID» signal Signal -> absent in state State signal Signal2 in [.. 5000.0 ms]
		'''
		acceptor.accept(createTemplate("Time Constraint Absence", prop, "Example of an Absence and Conditioned time constraint.", 0, context, 0, TIME_C_ID.length))
	}
	
	def acceptTimeConstraintConditioned(EObject object, RuleCall call, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val prop ='''«TIME_C_ID» in state State command Command - [ 1.0 ms .. 100.0 ms ] -> reply(*)
		'''
		acceptor.accept(createTemplate("Time Constraint Conditioned", prop, "Example of a Conditioned time constraint.", 0, context, 0, TIME_C_ID.length))
	}
	
	def acceptTimeConstraintInterval(EObject object, RuleCall call, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val prop ='''«TIME_C_ID» Command and Command2 -> [.. 100.0 ms] between events
		'''
		acceptor.accept(createTemplate("Time Constraint Interval", prop, "Example of an Interval time constraint.", 0, context, 0, TIME_C_ID.length))
	}
	
	def acceptTimeConstraintExample(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val prop ='''«TIME_C_ID» any command - [ 1.0 ms .. 10.0 ms ] -> reply
		'''
		acceptor.accept(createTemplate("Time Constraint Simple", prop, "Example of a Simple time constraint.", 0, context, 0, TIME_C_ID.length))
	}
	
	override complete_DataConstraint(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DataConstraint(model, ruleCall, context, acceptor)
		val prop ='''«DATA_C_ID» any command until any signal where var < 1
		'''
		acceptor.accept(createTemplate("Data Constraint Simple", prop, "Example of a Simple data constraint.", 0, context, 0, DATA_C_ID.length))
		
		val prop2 ='''«DATA_C_ID» command Command until Signal signal where var < 1
		'''
		acceptor.accept(createTemplate("Data Constraint Until", prop2, "Example of a Until data constraint.", 0, context, 0, DATA_C_ID.length))
	}
	
	override complete_GenericConstraint(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_GenericConstraint(model, ruleCall, context, acceptor)
		val prop ='''«GENERIC_C_ID» <var, any event> until <var, reply>
		'''
		acceptor.accept(createTemplate("Generic Constraint example", prop, "Generic constraint example", 0, context, GENERIC_C_ID.length))
	}

}
