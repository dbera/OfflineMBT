/**
 * Copyright (c) 2024, 2025 TNO-ESI
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available
 * under the terms of the MIT License which is available at
 * https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 */
grammar nl.esi.comma.abstracttestspecification.AbstractTestspecification with nl.esi.comma.assertthat.AssertThat

generate abstractTestspecification "http://www.esi.nl/comma/abstracttestspecification/AbstractTestspecification"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.esi.nl/comma/types/Types" as types
import "http://www.esi.nl/comma/expressions/Expression" as expr
import "http://www.asml.nl/matala/product/Product" as prod
import "http://www.esi.nl/comma/assertthat/AssertThat" as assertthat

TSMain:
    imports += Import*
    namespace += NameSpace*
    model = ModelType
;

@Override
NamedElement returns types::NamedElement:
    name=QualifiedName | Variable
;

@Override
ModelContainer returns types::ModelContainer:
    super::ModelContainer | TSMain
;

ModelType:
    AbstractTestDefinition
;


AbstractTestDefinition:
    {AbstractTestDefinition} 'abstract-test-definition'
    testSeq += AbstractTestSequence*
    'generate-file' filePath = STRING
;

AbstractTestSequence:
    'Test-Scenario' ':' name = ID
        step += AbstractStep+  
;

ConstraintStep:
    'data-references' ':' name = ID
    ce += [prod::RefConstraint|QualifiedName]+  
;

AssertStep:
    'output-assertion' ':' name = ID
    ce += [assertthat::DataAssertions|QualifiedName]+
;

AbstractStep:
    ComposeStep | ExecutableStep
;

ExecutableStep:
    RunStep | AssertionStep
;

ComposeStep:
    'compose-step-name' ':' name = ID
    stepRef += StepReference*
    'input-binding' ':' input += Binding+
    'output-data' ':' output += Binding+ (suppress=Suppress)? // do not generate these in concrete TSpec
    refs += ConstraintStep*
    ('sut-var' ':' '{' varID += [expr::Variable|QualifiedName]+ '}')?
;

RunStep:
    'run-step-name' ':' name = ID
    ('step-type' ':' stepType += STRING)?
    stepRef += StepReference*
    'input-binding' ':' input += Binding+
    'output-data' ':' output += Binding+ (suppress=Suppress)? // do not generate these in concrete TSpec
    ('sut-var' ':' '{' varID += [expr::Variable|QualifiedName]+ '}')?
;

AssertionStep:
    'assert-step-name' ':' name = ID
    ('assert-type' ':' stepType += STRING)?
    stepRef += StepReference*
    'input-binding' ':' input += Binding+
    'output-data' ':' output += Binding+ (suppress=Suppress)? // do not generate these in concrete TSpec
    asserts += AssertStep+
    ('sut-var' ':' '{' varID += [expr::Variable|QualifiedName]+ '}')?
;

StepReference:
    'consumes-from-step' ':' refStep = [AbstractStep|ID] '{' refData += [expr::Variable|QualifiedName]+ '}'
;

Binding:
    name = [expr::Variable|QualifiedName] ':' jsonvals = JsonValue
;

Suppress: {Suppress}
    'suppress' ('(' varFields+=SuppressVarFieldExp (',' varFields+=SuppressVarFieldExp)* ')')?
;

SuppressVarFieldExp returns expr::Expression:
    ExpressionVariable | FieldAccessExp
;

// Json Grammar

@Override
JsonExpression returns assertthat::JsonExpression: 
    expr = AbstractTestExpressionConstants
;

AbstractTestExpressionConstants returns expr::Expression:
    ExpressionConstantInt  | ExpressionConstantReal | ExpressionConstantBool | ExpressionConstantString // basic types
    | ExpressionMinus | ExpressionPlus // signed numbers
;

