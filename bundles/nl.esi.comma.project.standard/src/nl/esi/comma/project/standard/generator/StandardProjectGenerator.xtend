/*
 * generated by Xtext 2.12.0
 */
package nl.esi.comma.project.standard.generator

import java.io.FileInputStream
import nl.asml.matala.product.generator.ProductGenerator
import nl.asml.matala.product.product.Product
import nl.esi.comma.project.standard.standardProject.Project
import org.eclipse.emf.common.CommonPlugin
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StandardProjectGenerator extends AbstractGenerator {
	override doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if (res.allContents.head instanceof Project) {
            val resourceSet = res.resourceSet
            val project = res.contents.head as Project
            val inputFileURI = res.URI.trimSegments(1).appendSegment(project.product)
            val absFilePath = CommonPlugin.resolve(inputFileURI).toFileString
            val fis = new FileInputStream(absFilePath)
            resourceSet.createResource(URI.createURI(project.product)).load(fis, emptyMap)
			val inputResource = EcoreUtil2.getResource(res, project.product)
			val input = inputResource.allContents.head
			if (input instanceof Product) {
				(new ProductGenerator).doGenerate(inputResource, fsa, context)
			}
		}
	}
}
