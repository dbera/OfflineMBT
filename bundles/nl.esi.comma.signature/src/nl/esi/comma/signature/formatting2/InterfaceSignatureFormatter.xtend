/*
 * generated by Xtext 2.12.0
 */
package nl.esi.comma.signature.formatting2

import com.google.inject.Inject
import nl.esi.comma.signature.interfaceSignature.Command
import nl.esi.comma.signature.interfaceSignature.InterfaceSignatureDefinition
import nl.esi.comma.signature.interfaceSignature.Notification
import nl.esi.comma.signature.interfaceSignature.Parameter
import nl.esi.comma.signature.interfaceSignature.Signal
import nl.esi.comma.signature.interfaceSignature.Signature
import nl.esi.comma.signature.services.InterfaceSignatureGrammarAccess
import nl.esi.comma.types.formatting2.TypesFormatter
import nl.esi.comma.types.types.TypeDecl
import org.eclipse.xtext.formatting2.IFormattableDocument
import nl.esi.comma.types.types.Import

class InterfaceSignatureFormatter extends TypesFormatter {

	@Inject extension InterfaceSignatureGrammarAccess
	
	def dispatch void format(InterfaceSignatureDefinition interfaceDefinition, extension IFormattableDocument document) {
		interfaceDefinition.imports.forEach[format]		
		interfaceDefinition.signature.format;
	}
	
	def dispatch void format(Import _import, extension IFormattableDocument document) {
		formatTopElement(_import, document)
	}	

	def dispatch void format(Signature _signature, extension IFormattableDocument document) {
		val rFinder = _signature.regionFor
		
		formatTopElement(_signature, document)
		rFinder.keyword(signatureAccess.signatureKeyword_0).append(oneSpace)
		
		val kwTypes = rFinder.keyword(signatureAccess.typesKeyword_2_0)		
		val kwCommands = rFinder.keyword(signatureAccess.commandsKeyword_3_0)
		val kwSignals= rFinder.keyword(signatureAccess.signalsKeyword_4_0)
		val kwNotifications= rFinder.keyword(signatureAccess.notificationsKeyword_5_0)
		
		val kwFirst = if (kwTypes !== null) kwTypes else (if (kwCommands !== null) kwCommands else  (if (kwSignals !== null) kwSignals else kwNotifications))
		if(kwFirst !== null) {
			document.set(kwFirst.previousHiddenRegion, _signature.eAllContents.last.regionForEObject.nextHiddenRegion, indent);
		}
		
		kwTypes?.prepend(newLine)
		for (TypeDecl typeDecl : _signature.types) {
			typeDecl.format;
		}

		kwCommands?.prepend(emptyLine)
		for (Command command : _signature.commands) {
			command.format;
		}

		kwSignals?.prepend(emptyLine)
		for (Signal signal : _signature.signals) {
			signal.format;
		}

		kwNotifications?.prepend(emptyLine)
		for (Notification notification : _signature.notifications) {
			notification.format;
		}
	}

	def dispatch void format(Command _command, extension IFormattableDocument document) {
		val rFinder = _command.regionFor
		_command.prepend(newLine)
		_command.type.append(oneSpace)

		val pairs = rFinder.keywordPairs(commandAccess.leftParenthesisKeyword_2_0,
			commandAccess.rightParenthesisKeyword_2_3)
		if (!pairs.empty) {
			pairs.get(0).key.prepend(noSpace).append(noSpace)
			pairs.get(0).value.prepend(noSpace)
		}

		for (Parameter param : _command.parameters) {
			param.format;
		}
	}

	def dispatch void format(Notification _notification, extension IFormattableDocument document) {
		val rFinder = _notification.regionFor
		_notification.prepend(newLine)

		val pairs = rFinder.keywordPairs(notificationAccess.leftParenthesisKeyword_1_0,
			notificationAccess.rightParenthesisKeyword_1_3)
		if (!pairs.empty) {
			pairs.get(0).key.prepend(noSpace).append(noSpace)
			pairs.get(0).value.prepend(noSpace)
		}

		for (Parameter param : _notification.parameters) {
			param.format;
		}
	}

	def dispatch void format(Signal _signal, extension IFormattableDocument document) {
		val rFinder = _signal.regionFor
		_signal.prepend(newLine)
		
		rFinder.keyword(signalAccess.leftParenthesisKeyword_1_0).prepend(noSpace).append(noSpace)
		rFinder.keyword(signalAccess.rightParenthesisKeyword_1_3).prepend(noSpace)

		for (Parameter param : _signal.parameters) {
			param.format;
		}
	}

	def dispatch void format(Parameter _parameter, extension IFormattableDocument document) {
		val rFinder = _parameter.regionFor
		rFinder.ruleCall(parameterAccess.directionDIRECTIONEnumRuleCall_0_0)?.append(oneSpace)
		_parameter.type.append(oneSpace)
	}
	
}
