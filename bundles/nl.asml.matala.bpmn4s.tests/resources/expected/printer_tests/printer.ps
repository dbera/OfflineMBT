import "printer.types"
specification printer
{
    system PrintFactoryA3DPrinter
    {
        inputs
        PrintRequest	printJob
        CorrectionsReport	corrections
        
        outputs
        Result		printResult
        Report		printReport
    
        local
        PrintRequest	request
        
        UNIT	Event_0mxx05p
        UNIT	Event_0jcg6zx
        UNIT	between_ComposePrintJob_and_RunPrintJob
        UNIT	between_ComposePrepareJob_and_RunPrepareJob
    
        init
        corrections := CorrectionsReport { 
                           id = 1,
                           correctionsMap = <map<int,CorrectionItem[]>> { 
                                    0 -> <CorrectionItem[]> [ 
                                              CorrectionItem { data = "X" },
                                              CorrectionItem { data = "Y" } 
                                         ],
                                    1 -> <CorrectionItem[]> [ 
                                              CorrectionItem { data = "A" },
                                              CorrectionItem { data = "B" } 
                                         ] 
                           } 
                       }
    
    
        desc "PrintFactoryA 3D Printer_Model"
        
        action			RunPrintJob
        element-label	"Run Print Job"
        case			default step-type "ExecutePrinter" action-type RUN
        with-inputs		between_ComposePrintJob_and_RunPrintJob, request
        produces-outputs	Event_0jcg6zx suppress
        updates:
            Event_0jcg6zx := between_ComposePrintJob_and_RunPrintJob
        produces-outputs	printResult
        updates:    printResult := Result { verdict = Outcome::OK }
        produces-outputs	printReport symbolic-link
        updates:    printReport := Report {
             id = request.id
            }
        
        action			ComposePrintJob
        element-label	"Compose Print Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		printJob, corrections
        with-guard		corrections.id == printJob.id and printJob.opType == OperationType::PRINT
        produces-outputs	between_ComposePrintJob_and_RunPrintJob suppress
        produces-outputs	request symbolic-link
        updates:    request := printJob
        
        action			ComposePrepareJob
        element-label	"Compose Prepare Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		printJob
        with-guard		printJob.opType == OperationType::PREP
        produces-outputs	between_ComposePrepareJob_and_RunPrepareJob suppress
        produces-outputs	request symbolic-link
        updates:    request := printJob
        
        action			RunPrepareJob
        element-label	"Run Prepare Job"
        case			default step-type "ExecutePrinter" action-type RUN
        with-inputs		between_ComposePrepareJob_and_RunPrepareJob, request
        produces-outputs	Event_0mxx05p suppress
        updates:
            Event_0mxx05p := between_ComposePrepareJob_and_RunPrepareJob
        produces-outputs	printResult
        updates:    printResult := Result { verdict = Outcome::OK }
    
        element-labels ["PrintFactory", "A 3D Printer"]
    }
    
    system PrintFactoryInspection
    {
        inputs
        Report	printReport
        MeasureRequest	inspectionJob
        
        outputs
        Report		inspectionReport
        Result		inspectionResult
        Report		printReport
    
        local
        MeasureRequest	measureRequest
        
        
        UNIT	between_ComposeVisualInspectionJob_and_RunVisualinspection
    
        // init
    
    
        desc "PrintFactoryInspection_Model"
        
        action			RunVisualinspection
        element-label	"Run Visual inspection"
        case			default step-type "ExecuteInspection" action-type RUN
        with-inputs		between_ComposeVisualInspectionJob_and_RunVisualinspection, measureRequest
        produces-outputs	inspectionReport symbolic-link
        updates:    inspectionReport := Report {
             id = measureRequest.id
            }
        produces-outputs	inspectionResult
        updates:    inspectionResult := Result { verdict = Outcome::OK }
        
        action			ComposeVisualInspectionJob
        element-label	"Compose Visual Inspection Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		inspectionJob, printReport
        with-guard		printReport.id == inspectionJob.id
        produces-outputs	between_ComposeVisualInspectionJob_and_RunVisualinspection suppress
        produces-outputs	measureRequest
        references {
            reportLinking: measureRequest.printJobReport := printReport
        } symbolic-link
        updates:    measureRequest := inspectionJob
        produces-outputs	printReport symbolic-link suppress
        updates: printReport := printReport
    
        element-labels ["PrintFactory", "Inspection"]
    }
    
    system PrintFactoryOptimization
    {
        inputs
        OptimizeRequest	optJob
        Report	inspectionReport
        
        outputs
        Result		optResult
        CorrectionsReport		corrections
        Report		inspectionReport
    
        local
        OptimizeRequest	optimizeJob
        
        UNIT	Event_1oozdnw
        UNIT	between_ComposeOptimizationJob_and_RunOptimizationJob
    
        // init
    
    
        desc "PrintFactoryOptimization_Model"
        
        action			ComposeOptimizationJob
        element-label	"Compose Optimization Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		optJob, inspectionReport
        with-guard		inspectionReport.id == optJob.id
        produces-outputs	between_ComposeOptimizationJob_and_RunOptimizationJob suppress
        produces-outputs	optimizeJob symbolic-link
        updates:    optimizeJob := optJob
        produces-outputs	inspectionReport symbolic-link suppress
        updates: inspectionReport := inspectionReport
        
        action			RunOptimizationJob
        element-label	"Run Optimization Job"
        case			default step-type "ExecuteOptimizer" action-type RUN
        with-inputs		between_ComposeOptimizationJob_and_RunOptimizationJob, optimizeJob
        produces-outputs	Event_1oozdnw suppress
        updates:
            Event_1oozdnw := between_ComposeOptimizationJob_and_RunOptimizationJob
        produces-outputs	corrections symbolic-link
        updates:    corrections := CorrectionsReport {
             id = optimizeJob.id + 1
            }
        produces-outputs	optResult
    
        element-labels ["PrintFactory", "Optimization"]
    }
    
    system PrintFactoryFactoryAutomation
    {
        inputs
        Result	printResult
        Result	inspectionResult
        Result	optResult
        PrintRequest	printRequests
        Report	inspectionReport
        
        outputs
        PrintRequest		printJob
        MeasureRequest		inspectionJob
        OptimizeRequest		optJob
        Report		inspectionReport
    
        local
        FactoryCtx	Gateway_0p2uo9v
        FactoryCtx	Gateway_1wpvmtk
        
        
        FactoryCtx	between_SendPrintJob_and_WaitforPrintJob
        FactoryCtx	between_WaitforPrintJob_and_Gateway_1j3rupx
        FactoryCtx	between_SendVisualInspectionJob_and_WaitforVisualInspection
        FactoryCtx	between_WaitforVisualInspection_and_AssertVisualInspection
        FactoryCtx	between_SendOptimizationJob_and_WaitforOptimizationJob
        FactoryCtx	between_WaitforOptimizationJob_and_Gateway_1f8wap6
        FactoryCtx	between_PreparePrinter_and_WaitforPrepare
        FactoryCtx	between_WaitforPrepare_and_Gateway_1f8wap6
        FactoryCtx	between_AssertVisualInspection_and_SendOptimizationJob
        FactoryCtx	between_Gateway_1j3rupx_and_SendVisualInspectionJob
        FactoryCtx	between_Gateway_1j3rupx_and_PreparePrinter
    
        init
        Gateway_1wpvmtk := FactoryCtx {
         id = 1,
         resolution = PrintResolution::LOW,
         scale = 0.0,
         color = ColorType::MONOCHROME
        }
        printRequests := PrintRequest {
         id = 1,
         resolution = PrintResolution::LOW,
         scale = 50.0,
         color = ColorType::MONOCHROME,
            opType = OperationType::PRINT
        }
        
        printRequests := PrintRequest {
         id = 2,
         resolution = PrintResolution::MED,
         scale = 75.0,
         color = ColorType::COLOR,
            opType = OperationType::PRINT
        }
        
        printRequests := PrintRequest {
         id = 3,
         resolution = PrintResolution::HIGH,
         scale = 75.0,
         color = ColorType::COLOR,
            opType = OperationType::PRINT
        }
    
    
        desc "PrintFactoryFactory Automation_Model"
        
        action			SendPrintJob
        element-label	"Send Print Job"
        case			default
        with-inputs		Gateway_1wpvmtk, printRequests
        with-guard		printRequests.id == Gateway_1wpvmtk.id
        produces-outputs	between_SendPrintJob_and_WaitforPrintJob
        updates:
            between_SendPrintJob_and_WaitforPrintJob := Gateway_1wpvmtk
            between_SendPrintJob_and_WaitforPrintJob.color := printRequests.color
            between_SendPrintJob_and_WaitforPrintJob.resolution := printRequests.resolution
            between_SendPrintJob_and_WaitforPrintJob.scale := printRequests.scale
        produces-outputs	printJob
        updates:    printJob := PrintRequest {
             id = printRequests.id,
             resolution = printRequests.resolution,
             scale = printRequests.scale,
             color = printRequests.color,
             opType = printRequests.opType
            }
        
        action			NextJob
        element-label	"Next Job"
        case			default
        with-inputs		Gateway_0p2uo9v
        produces-outputs	Gateway_1wpvmtk
        updates:
            Gateway_1wpvmtk := Gateway_0p2uo9v
            Gateway_1wpvmtk.id := Gateway_1wpvmtk.id + 1
        
        action			WaitforOptimizationJob
        element-label	"Wait for Optimization Job"
        case			default
        with-inputs		between_SendOptimizationJob_and_WaitforOptimizationJob, optResult
        produces-outputs	between_WaitforOptimizationJob_and_Gateway_1f8wap6
        updates:
            between_WaitforOptimizationJob_and_Gateway_1f8wap6 := between_SendOptimizationJob_and_WaitforOptimizationJob
        
        action			Gateway_1f8wap6
        element-label	"Gateway_1f8wap6"
        case			default
        with-inputs		between_WaitforOptimizationJob_and_Gateway_1f8wap6, between_WaitforPrepare_and_Gateway_1f8wap6
        with-guard		between_WaitforPrepare_and_Gateway_1f8wap6 == between_WaitforOptimizationJob_and_Gateway_1f8wap6
        produces-outputs	Gateway_0p2uo9v
        updates:
            Gateway_0p2uo9v := between_WaitforOptimizationJob_and_Gateway_1f8wap6
        
        action			Gateway_1j3rupx
        element-label	"Gateway_1j3rupx"
        case			default
        with-inputs		between_WaitforPrintJob_and_Gateway_1j3rupx
        produces-outputs	between_Gateway_1j3rupx_and_SendVisualInspectionJob
        updates:
            between_Gateway_1j3rupx_and_SendVisualInspectionJob := between_WaitforPrintJob_and_Gateway_1j3rupx
        produces-outputs	between_Gateway_1j3rupx_and_PreparePrinter
        updates:
            between_Gateway_1j3rupx_and_PreparePrinter := between_WaitforPrintJob_and_Gateway_1j3rupx
        
        action			WaitforVisualInspection
        element-label	"Wait for Visual Inspection"
        case			default
        with-inputs		between_SendVisualInspectionJob_and_WaitforVisualInspection, inspectionResult
        produces-outputs	between_WaitforVisualInspection_and_AssertVisualInspection
        updates:
            between_WaitforVisualInspection_and_AssertVisualInspection := between_SendVisualInspectionJob_and_WaitforVisualInspection
        
        action			SendOptimizationJob
        element-label	"Send Optimization Job"
        case			default
        with-inputs		between_AssertVisualInspection_and_SendOptimizationJob
        produces-outputs	between_SendOptimizationJob_and_WaitforOptimizationJob
        updates:
            between_SendOptimizationJob_and_WaitforOptimizationJob := between_AssertVisualInspection_and_SendOptimizationJob
        produces-outputs	optJob
        updates:    optJob := OptimizeRequest { id = between_AssertVisualInspection_and_SendOptimizationJob.id }
        
        action			PreparePrinter
        element-label	"Prepare Printer"
        case			default
        with-inputs		between_Gateway_1j3rupx_and_PreparePrinter
        produces-outputs	between_PreparePrinter_and_WaitforPrepare
        updates:
            between_PreparePrinter_and_WaitforPrepare := between_Gateway_1j3rupx_and_PreparePrinter
        produces-outputs	printJob
        updates:    printJob := PrintRequest {
             id = between_Gateway_1j3rupx_and_PreparePrinter.id,
             resolution = between_Gateway_1j3rupx_and_PreparePrinter.resolution,
             scale = null,
             color = between_Gateway_1j3rupx_and_PreparePrinter.color,
             opType = OperationType::PREP
            }
        
        action			AssertVisualInspection
        element-label	"Assert Visual Inspection"
        case			default step-type "Assert_Visual_Inspection" action-type ASSERT
        with-inputs		between_WaitforVisualInspection_and_AssertVisualInspection, inspectionReport
        assertions default {
            assert_kpi: assert-that (inspectionReport.kpi) {
              equal-to 9.0 within-margin relative (1.0)
            }
        }
        produces-outputs	between_AssertVisualInspection_and_SendOptimizationJob
        updates:
            between_AssertVisualInspection_and_SendOptimizationJob := between_WaitforVisualInspection_and_AssertVisualInspection
        produces-outputs	inspectionReport symbolic-link
        updates: inspectionReport := inspectionReport
        
        action			SendVisualInspectionJob
        element-label	"Send Visual Inspection Job"
        case			default
        with-inputs		between_Gateway_1j3rupx_and_SendVisualInspectionJob
        produces-outputs	between_SendVisualInspectionJob_and_WaitforVisualInspection
        updates:
            between_SendVisualInspectionJob_and_WaitforVisualInspection := between_Gateway_1j3rupx_and_SendVisualInspectionJob
        produces-outputs	inspectionJob
        updates:    inspectionJob := MeasureRequest {
             id = between_Gateway_1j3rupx_and_SendVisualInspectionJob.id
            }
        
        action			WaitforPrepare
        element-label	"Wait for Prepare"
        case			default
        with-inputs		between_PreparePrinter_and_WaitforPrepare, printResult
        produces-outputs	between_WaitforPrepare_and_Gateway_1f8wap6
        updates:
            between_WaitforPrepare_and_Gateway_1f8wap6 := between_PreparePrinter_and_WaitforPrepare
        
        action			WaitforPrintJob
        element-label	"Wait for Print Job"
        case			default
        with-inputs		between_SendPrintJob_and_WaitforPrintJob, printResult
        produces-outputs	between_WaitforPrintJob_and_Gateway_1j3rupx
        updates:
            between_WaitforPrintJob_and_Gateway_1j3rupx := between_SendPrintJob_and_WaitforPrintJob
    
        element-labels ["PrintFactory", "Factory Automation"]
    }
    
	SUT-blocks PrintFactoryA3DPrinter PrintFactoryInspection PrintFactoryA3DPrinter PrintFactoryOptimization
	depth-limits 300
	num-tests 1
}
