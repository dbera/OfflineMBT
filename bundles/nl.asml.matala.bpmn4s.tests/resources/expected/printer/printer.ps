import "printer.types"
specification printer
{
    system PrintFactoryA3DPrinter
    {
        inputs
        PrintRequest	printJob
        CorrectionsReport	corrections
        
        outputs
        Result		printResult
        Report		printReport
    
        local
        PrintRequest	request
        
        UNIT	Event_0mxx05p
        UNIT	Event_0jcg6zx
        UNIT	Flow_1u2qmtt
        UNIT	Flow_0iaelzn
    
        init
        corrections := CorrectionsReport { 
                           id = 1,
                           correctionsMap = <map<int,CorrectionItem[]>> { 
                                    0 -> <CorrectionItem[]> [ 
                                              CorrectionItem { data = "X" },
                                              CorrectionItem { data = "Y" } 
                                         ],
                                    1 -> <CorrectionItem[]> [ 
                                              CorrectionItem { data = "A" },
                                              CorrectionItem { data = "B" } 
                                         ] 
                           } 
                       }
    
    
        desc "PrintFactoryA 3D Printer_Model"
        
        action			RunPrintJob
        element-label	"Run Print Job"
        case			default step-type "ExecutePrinter" action-type RUN
        with-inputs		Flow_1u2qmtt, request
        produces-outputs	Event_0jcg6zx suppress
        updates:
            Event_0jcg6zx := Flow_1u2qmtt
        produces-outputs	printResult
        updates:
            printResult := Result { verdict = Outcome::OK }
        produces-outputs	printReport symbolic-link
        updates:
            printReport := Report {
             id = request.id
            }
        
        action			ComposePrintJob
        element-label	"Compose Print Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		printJob, corrections
        with-guard		corrections.id == printJob.id and printJob.opType == OperationType::PRINT
        produces-outputs	Flow_1u2qmtt suppress
        produces-outputs	request symbolic-link
        updates:
            request := printJob
        
        action			ComposePrepareJob
        element-label	"Compose Prepare Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		printJob
        with-guard		printJob.opType == OperationType::PREP
        produces-outputs	Flow_0iaelzn suppress
        produces-outputs	request symbolic-link
        updates:
            request := printJob
        
        action			RunPrepareJob
        element-label	"Run Prepare Job"
        case			default step-type "ExecutePrinter" action-type RUN
        with-inputs		Flow_0iaelzn, request
        produces-outputs	Event_0mxx05p suppress
        updates:
            Event_0mxx05p := Flow_0iaelzn
        produces-outputs	printResult
        updates:
            printResult := Result { verdict = Outcome::OK }
    
        element-labels ["PrintFactory", "A 3D Printer"]
    }
    
    system PrintFactoryInspection
    {
        inputs
        Report	printReport
        MeasureRequest	inspectionJob
        
        outputs
        Report		inspectionReport
        Result		inspectionResult
        Report		printReport
    
        local
        MeasureRequest	measureRequest
        
        
        UNIT	Flow_07l0yyj
    
        // init
    
    
        desc "PrintFactoryInspection_Model"
        
        action			RunVisualinspection
        element-label	"Run Visual inspection"
        case			default step-type "ExecuteInspection" action-type RUN
        with-inputs		Flow_07l0yyj, measureRequest
        produces-outputs	inspectionReport symbolic-link
        updates:
            inspectionReport := Report {
             id = measureRequest.id
            }
        produces-outputs	inspectionResult
        updates:
            inspectionResult := Result { verdict = Outcome::OK }
        
        action			ComposeVisualInspectionJob
        element-label	"Compose Visual Inspection Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		inspectionJob, printReport
        with-guard		printReport.id == inspectionJob.id
        produces-outputs	Flow_07l0yyj suppress
        produces-outputs	measureRequest
        references {
            reportLinking: measureRequest.printJobReport := printReport
        } symbolic-link
        updates:
            measureRequest := inspectionJob
        produces-outputs	printReport symbolic-link suppress
        updates:
            printReport := printReport
    
        element-labels ["PrintFactory", "Inspection"]
    }
    
    system PrintFactoryOptimization
    {
        inputs
        OptimizeRequest	optJob
        Report	inspectionReport
        
        outputs
        Result		optResult
        CorrectionsReport		corrections
        Report		inspectionReport
    
        local
        OptimizeRequest	optimizeJob
        
        UNIT	Event_1oozdnw
        UNIT	Flow_0y8u5pd
    
        // init
    
    
        desc "PrintFactoryOptimization_Model"
        
        action			ComposeOptimizationJob
        element-label	"Compose Optimization Job"
        case			default step-type "null" action-type COMPOSE
        with-inputs		optJob, inspectionReport
        with-guard		inspectionReport.id == optJob.id
        produces-outputs	Flow_0y8u5pd suppress
        produces-outputs	optimizeJob symbolic-link
        updates:
            optimizeJob := optJob
        produces-outputs	inspectionReport symbolic-link suppress
        updates:
            inspectionReport := inspectionReport
        
        action			RunOptimizationJob
        element-label	"Run Optimization Job"
        case			default step-type "ExecuteOptimizer" action-type RUN
        with-inputs		Flow_0y8u5pd, optimizeJob
        produces-outputs	Event_1oozdnw suppress
        updates:
            Event_1oozdnw := Flow_0y8u5pd
        produces-outputs	corrections symbolic-link
        updates:
            corrections := CorrectionsReport {
             id = optimizeJob.id + 1
            }
        produces-outputs	optResult
    
        element-labels ["PrintFactory", "Optimization"]
    }
    
    system PrintFactoryFactoryAutomation
    {
        inputs
        Result	printResult
        Result	inspectionResult
        Result	optResult
        PrintRequest	printRequests
        Report	inspectionReport
        
        outputs
        PrintRequest		printJob
        MeasureRequest		inspectionJob
        OptimizeRequest		optJob
        Report		inspectionReport
    
        local
        FactoryCtx	Gateway_0p2uo9v
        FactoryCtx	Gateway_1wpvmtk
        
        
        FactoryCtx	Flow_16s4ey1
        FactoryCtx	Flow_1dcdx0e
        FactoryCtx	Flow_1dt29vl
        FactoryCtx	Flow_0kbycuh
        FactoryCtx	Flow_01m2s0h
        FactoryCtx	Flow_09b0flo
        FactoryCtx	Flow_1rkhqnd
        FactoryCtx	Flow_1vq9t2p
        FactoryCtx	Flow_0fe8hce
        FactoryCtx	Flow_1y4bjf4
        FactoryCtx	Flow_1f74bn4
    
        init
        Gateway_1wpvmtk := FactoryCtx {
         id = 1,
         resolution = PrintResolution::LOW,
         scale = 0.0,
         color = ColorType::MONOCHROME
        }
        printRequests := PrintRequest {
         id = 1,
         resolution = PrintResolution::LOW,
         scale = 50.0,
         color = ColorType::MONOCHROME,
            opType = OperationType::PRINT
        }
        
        printRequests := PrintRequest {
         id = 2,
         resolution = PrintResolution::MED,
         scale = 75.0,
         color = ColorType::COLOR,
            opType = OperationType::PRINT
        }
        
        printRequests := PrintRequest {
         id = 3,
         resolution = PrintResolution::HIGH,
         scale = 75.0,
         color = ColorType::COLOR,
            opType = OperationType::PRINT
        }
    
    
        desc "PrintFactoryFactory Automation_Model"
        
        action			SendPrintJob
        element-label	"Send Print Job"
        case			default
        with-inputs		Gateway_1wpvmtk, printRequests
        with-guard		printRequests.id == Gateway_1wpvmtk.id
        produces-outputs	Flow_16s4ey1
        updates:
            Flow_16s4ey1 := Gateway_1wpvmtk
            Flow_16s4ey1.color := printRequests.color
            Flow_16s4ey1.resolution := printRequests.resolution
            Flow_16s4ey1.scale := printRequests.scale
        produces-outputs	printJob
        updates:
            printJob := PrintRequest {
             id = printRequests.id,
             resolution = printRequests.resolution,
             scale = printRequests.scale,
             color = printRequests.color,
             opType = printRequests.opType
            }
        
        action			NextJob
        element-label	"Next Job"
        case			default
        with-inputs		Gateway_0p2uo9v
        produces-outputs	Gateway_1wpvmtk
        updates:
            Gateway_1wpvmtk := Gateway_0p2uo9v
            Gateway_1wpvmtk.id := Gateway_1wpvmtk.id + 1
        
        action			WaitforOptimizationJob
        element-label	"Wait for Optimization Job"
        case			default
        with-inputs		Flow_01m2s0h, optResult
        produces-outputs	Flow_09b0flo
        updates:
            Flow_09b0flo := Flow_01m2s0h
        
        action			Gateway_1f8wap6
        element-label	"Gateway_1f8wap6"
        case			default
        with-inputs		Flow_09b0flo, Flow_1vq9t2p
        with-guard		Flow_1vq9t2p == Flow_09b0flo
        produces-outputs	Gateway_0p2uo9v
        updates:
            Gateway_0p2uo9v := Flow_09b0flo
        
        action			Gateway_1j3rupx
        element-label	"Gateway_1j3rupx"
        case			default
        with-inputs		Flow_1dcdx0e
        produces-outputs	Flow_1y4bjf4
        updates:
            Flow_1y4bjf4 := Flow_1dcdx0e
        produces-outputs	Flow_1f74bn4
        updates:
            Flow_1f74bn4 := Flow_1dcdx0e
        
        action			WaitforVisualInspection
        element-label	"Wait for Visual Inspection"
        case			default
        with-inputs		Flow_1dt29vl, inspectionResult
        produces-outputs	Flow_0kbycuh
        updates:
            Flow_0kbycuh := Flow_1dt29vl
        
        action			SendOptimizationJob
        element-label	"Send Optimization Job"
        case			default
        with-inputs		Flow_0fe8hce
        produces-outputs	Flow_01m2s0h
        updates:
            Flow_01m2s0h := Flow_0fe8hce
        produces-outputs	optJob
        updates:
            optJob := OptimizeRequest { id = Flow_0fe8hce.id }
        
        action			PreparePrinter
        element-label	"Prepare Printer"
        case			default
        with-inputs		Flow_1f74bn4
        produces-outputs	Flow_1rkhqnd
        updates:
            Flow_1rkhqnd := Flow_1f74bn4
        produces-outputs	printJob
        updates:
            printJob := PrintRequest {
             id = Flow_1f74bn4.id,
             resolution = Flow_1f74bn4.resolution,
             scale = null,
             color = Flow_1f74bn4.color,
             opType = OperationType::PREP
            }
        
        action			AssertVisualInspection
        element-label	"Assert Visual Inspection"
        case			default step-type "Assert_Visual_Inspection" action-type ASSERT
        with-inputs		Flow_0kbycuh, inspectionReport
        assertions default {
            assert_kpi: assert-that (inspectionReport.kpi) {
              equal-to 9.0 within-margin relative (1.0)
            }
        }
        produces-outputs	Flow_0fe8hce
        updates:
            Flow_0fe8hce := Flow_0kbycuh
        produces-outputs	inspectionReport symbolic-link
        updates:
            inspectionReport := inspectionReport
        
        action			SendVisualInspectionJob
        element-label	"Send Visual Inspection Job"
        case			default
        with-inputs		Flow_1y4bjf4
        produces-outputs	Flow_1dt29vl
        updates:
            Flow_1dt29vl := Flow_1y4bjf4
        produces-outputs	inspectionJob
        updates:
            inspectionJob := MeasureRequest {
             id = Flow_1y4bjf4.id
            }
        
        action			WaitforPrepare
        element-label	"Wait for Prepare"
        case			default
        with-inputs		Flow_1rkhqnd, printResult
        produces-outputs	Flow_1vq9t2p
        updates:
            Flow_1vq9t2p := Flow_1rkhqnd
        
        action			WaitforPrintJob
        element-label	"Wait for Print Job"
        case			default
        with-inputs		Flow_16s4ey1, printResult
        produces-outputs	Flow_1dcdx0e
        updates:
            Flow_1dcdx0e := Flow_16s4ey1
    
        element-labels ["PrintFactory", "Factory Automation"]
    }
    
	SUT-blocks PrintFactoryA3DPrinter PrintFactoryInspection PrintFactoryA3DPrinter PrintFactoryOptimization
	depth-limits 300
	num-tests 1
}
