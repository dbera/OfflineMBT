import "fries_flat.types"
specification fries_flat
{
    system Fries
    {
        //inputs
        
        //outputs
    
        local
        Fries	fries
        Topping	topping
        FriesContext	choice
        FriesContext	Gateway_0k04hvx
        FriesContext	start_event
        FriesContext	end_event
        FriesContext	Flow_1fk5b3r
        FriesContext	Flow_003weme
        FriesContext	Flow_0z70hyg
        FriesContext	Flow_0bwi85w
    
        init
        start_event := FriesContext { client_id = "Tom" }
        start_event := FriesContext { client_id = "Bob" }
    
    
        desc "Fries_Model"
        
        action			ChooseKetchup
        element-label	"Choose Ketchup"
        case			default
        with-inputs		choice
        with-guard		choice.client_id == "Tom"
        produces-outputs	Gateway_0k04hvx
        updates:
            Gateway_0k04hvx := choice
        produces-outputs	topping
        updates:
            topping := Topping {
             ctx = choice,
             sauce = Sauce::Ketchup
            }
        
        action			ChooseMayo
        element-label	"Choose Mayo"
        case			default
        with-inputs		choice
        produces-outputs	Gateway_0k04hvx
        updates:
            Gateway_0k04hvx := choice
        produces-outputs	topping
        updates:
            topping := Topping {
             ctx = choice,
             sauce = Sauce::Mayo
            }
        
        action			AddTopping
        element-label	"Add Topping"
        case			default
        with-inputs		Flow_1fk5b3r, topping
        with-guard		topping.ctx == Flow_1fk5b3r
        produces-outputs	Flow_003weme
        updates:
            Flow_003weme := Flow_1fk5b3r
        produces-outputs	fries
        updates:
            fries := Fries {
             dressing = topping,
             client_id = Flow_1fk5b3r.client_id
            }
        
        action			parallel
        element-label	"parallel"
        case			default
        with-inputs		start_event
        produces-outputs	choice
        updates:
            choice := start_event
        produces-outputs	Flow_0z70hyg
        updates:
            Flow_0z70hyg := start_event
        
        action			Eat
        element-label	"Eat"
        case			default
        with-inputs		Flow_0bwi85w, fries
        produces-outputs	end_event
        updates:
            end_event := Flow_0bwi85w
        
        action			MakeFries
        element-label	"Make Fries"
        case			default
        with-inputs		Flow_0z70hyg
        produces-outputs	Flow_1fk5b3r
        updates:
            Flow_1fk5b3r := Flow_0z70hyg
        
        action			join
        element-label	"join"
        case			default
        with-inputs		Flow_003weme, Gateway_0k04hvx
        with-guard		Gateway_0k04hvx == Flow_003weme
        produces-outputs	Flow_0bwi85w
        updates:
            Flow_0bwi85w := Flow_003weme
    
        element-labels ["Fries"]
    }
    
	SUT-blocks 
	depth-limits 300
	num-tests 1
}
